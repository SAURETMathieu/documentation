"use strict";(self.webpackChunksauret_doc=self.webpackChunksauret_doc||[]).push([[7245],{1575:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=o(5893),t=o(1151);const s={id:"logger",title:"Logger - Journalisation",sidebar_label:"Journalisation"},i=void 0,a={id:"javascript/Logger/logger",title:"Logger - Journalisation",description:"Installation des d\xe9pendences",source:"@site/docs/javascript/Logger/logger.md",sourceDirName:"javascript/Logger",slug:"/javascript/Logger/",permalink:"/docs/javascript/Logger/",draft:!1,unlisted:!1,editUrl:"https://github.com/SAURETMathieu/docs/javascript/Logger/logger.md",tags:[],version:"current",frontMatter:{id:"logger",title:"Logger - Journalisation",sidebar_label:"Journalisation"},sidebar:"javascriptSidebar",previous:{title:"Joi",permalink:"/docs/javascript/Joi/joi"},next:{title:"Cors",permalink:"/docs/javascript/Middlewares/cors"}},l={},d=[{value:"Installation des d\xe9pendences",id:"installation-des-d\xe9pendences",level:2},{value:"Configuration de winston",id:"configuration-de-winston",level:2},{value:"Configuration des transports",id:"configuration-des-transports",level:2},{value:"Middleware logger",id:"middleware-logger",level:2},{value:"Importer le logger dans l&#39;application",id:"importer-le-logger-dans-lapplication",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"installation-des-d\xe9pendences",children:"Installation des d\xe9pendences"}),"\n",(0,r.jsx)(n.p,{children:"Pour commencer, installez les d\xe9pendances n\xe9cessaires avec la commande suivante :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  npm i winston\n  npm i winston-daily-rotate-file\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-de-winston",children:"Configuration de winston"}),"\n",(0,r.jsx)(n.p,{children:"La configuration d\xe9finit trois transports diff\xe9rents en fonction de l'environnement de l'application :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"transportCombinedFile : pour les journaux combin\xe9s en mode production."}),"\n",(0,r.jsx)(n.li,{children:"transportErrorFile : pour les journaux d'erreurs en mode production."}),"\n",(0,r.jsx)(n.li,{children:"transportCombinedConsole : pour les journaux combin\xe9s en mode d\xe9veloppement affich\xe9s dans la console."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Les configurations incluent des param\xe8tres tels que le niveau de journalisation, le chemin du fichier de journal, le mod\xe8le de date pour la rotation des fichiers, la fr\xe9quence de rotation, le nombre maximal de fichiers \xe0 conserver, et le format du journal."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const winston = require('winston');\nconst DailyRotateFile = require('winston-daily-rotate-file');\n\n// Importation de divers modules du module winston pour la configuration\nconst {\n  combine, timestamp: now, label: category, printf, json, colorize,\n} = winston.format;\n\n// D\xe9finition du format de la console pour les journaux\nconst consoleFormat = printf(({\n  level, message, label, timestamp,\n}) => `${timestamp} [${label}] ${level}: ${message}`);\n\n// Configuration du transport des journaux en mode production pour les journaux combin\xe9s\nconst transportCombinedFile = new winston.transports.DailyRotateFile({\n  level: 'http',\n  filename: './logs/combined.log',\n  datePattern: 'YYYY-MM-DD-HH-mm',\n  zippedArchive: true,\n  frequency: '1h',\n  maxFiles: '3d',\n  format: combine(\n    now(),\n    json(),\n  ),\n});\n\n// Configuration du transport des journaux en mode production pour les erreurs\nconst transportErrorFile = new winston.transports.DailyRotateFile({\n  level: 'error',\n  filename: './logs/error.log',\n  datePattern: 'YYYY-MM-DD-HH-mm',\n  zippedArchive: true,\n  frequency: '1h',\n  maxFiles: '3d',\n  format: combine(\n    now(),\n    json(),\n  ),\n});\n\n// Configuration du transport des journaux en mode d\xe9veloppement pour la console\nconst transportCombinedConsole = new winston.transports.Console({\n  level: 'http',\n  format: combine(\n    category({ label: 'all' }),\n    now(),\n    colorize(),\n    consoleFormat,\n  ),\n});\n\n// Exportation des configurations des transports\nmodule.exports = { transportCombinedFile, transportErrorFile, transportCombinedConsole };\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-des-transports",children:"Configuration des transports"}),"\n",(0,r.jsxs)(n.p,{children:["La configuration du logger repose sur le module ",(0,r.jsx)(n.code,{children:"winston"})," et son extension ",(0,r.jsx)(n.code,{children:"winston-daily-rotate-file"})," pour une rotation quotidienne des fichiers. Les transports utilis\xe9s d\xe9pendent de l'environnement (production ou non)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const winston = require('winston');\nconst DailyRotateFile = require('winston-daily-rotate-file');\nconst {\n  transportCombinedFile,\n  transportErrorFile,\n  transportCombinedConsole,\n} = require('./transports.logger.js');\n\nconst transports = [];\nif (process.env.NODE_ENV === 'production') {\n  transports.push(transportCombinedFile, transportErrorFile);\n} else {\n  transports.push(transportCombinedConsole);\n}\n\nconst logger = winston.createLogger({\n  transports,\n});\n\nmodule.exports = logger;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"middleware-logger",children:"Middleware logger"}),"\n",(0,r.jsxs)(n.p,{children:["Le middleware ",(0,r.jsx)(n.code,{children:"httpLogger"})," enregistre des informations de journalisation pour chaque requ\xeate HTTP. Il utilise le logger configur\xe9 pr\xe9c\xe9demment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const logger = require('../helpers/index.logger.js');\n\nfunction httpLogger(request, response, next) {\n  response.on('finish', () => {\n    const clientIP = request.ip;\n\n    const actualStatus = response.statusCode;\n\n    const logInfo = {\n      httpStatus: actualStatus,\n      level: 'http',\n      message: `${clientIP} ${request.method} ${request.originalUrl}`,\n      timestamp: new Date().toISOString(),\n    };\n\n    logger.http(logInfo);\n  });\n\n  next();\n}\n\nmodule.exports = httpLogger;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"importer-le-logger-dans-lapplication",children:"Importer le logger dans l'application"}),"\n",(0,r.jsxs)(n.p,{children:["Int\xe9grez le middleware ",(0,r.jsx)(n.code,{children:"httpLogger"})," dans votre application en l'ajoutant \xe0 la liste des middlewares utilis\xe9s. Par exemple :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const httpLogger = require('./app/middlewares/httpLogger.js');\n\napp.use(httpLogger);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ce middleware permettra de g\xe9n\xe9rer des journaux pour chaque requ\xeate HTTP trait\xe9e par votre application dans un repertoire ",(0,r.jsx)(n.code,{children:"logs"})]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>i});var r=o(7294);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);